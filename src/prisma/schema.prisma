generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int   @id @default(autoincrement())
  email        String   @unique
  username     String
  password     String
  role         UserRole? @default(USER)
  address      String?
  phone        String?
  gender       UserGender? @default(OTHER)
  age          Int?
  is_deleted   Boolean   @default(false)
  deleted_at   DateTime?
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  avatar       File?    @relation("UserAvatar")
  records      Record[]

  @@map("users")
}

model Mood {
  id           Int   @id @default(autoincrement())
  name         String
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  records      Record[]

  @@map("moods")
}

model Activity {
  id           Int   @id @default(autoincrement())
  name         String
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  records      ActivityRecord[]

  @@map("activities")
}

model Record {
  id           Int       @id @default(autoincrement())
  title        String
  content      String
  status       RecordStatus @default(ACTIVE)
  created_time DateTime     @default(now())
  updated_time DateTime     @updatedAt
  mood_id      Int?
  user_id      Int
  activities   ActivityRecord[]
  files         File[]
  mood         Mood?        @relation(fields: [mood_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("records")
}

// Join table for many-to-many relationship
model ActivityRecord {
  activity_id  Int
  record_id    Int
  created_time DateTime @default(now())
  
  activity     Activity @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  record       Record   @relation(fields: [record_id], references: [id], onDelete: Cascade)

  @@id([activity_id, record_id])
  @@map("activity_records")
}

model File {
  id           Int   @id @default(autoincrement())
  fname        String
  type         String
  url          String
  fkey         String
  size         Decimal
  record_id    Int?
  user_id      Int?  @unique
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  record       Record?  @relation(fields: [record_id], references: [id])
  user         User?    @relation("UserAvatar", fields: [user_id], references: [id])

  @@map("files")
}

enum RecordStatus {
  ACTIVE
  DRAFT
  DELETED
}

enum UserRole {
  USER
  ADMIN
}

enum UserGender {
  MALE
  FAMALE
  OTHER
}
