// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt    @id @default(autoincrement())
  email     String    @unique
  username  String
  password  String
  phone     String?
  gender    String?
  age       Int?
  records   Record[]
  avatar    File?     @relation("UserAvatar")

  @@map("users")
}

model Mood {
  id           BigInt     @id @default(autoincrement())
  name         String
  color        String
  icon         String
  created_time DateTime   @default(now())
  updated_time DateTime   @updatedAt
  records      Record[]

  @@map("moods")
}

model Activity {
  id           BigInt     @id @default(autoincrement())
  icon         String
  description  String
  created_time DateTime   @default(now())
  updated_time DateTime   @updatedAt
  records      Record[]

  @@map("activities")
}

model Record {
  id           BigInt        @id @default(autoincrement())
  note         String
  created_time DateTime      @default(now())
  updated_time DateTime      @updatedAt
  mood_id      BigInt?
  activity_id  BigInt?
  user_id      BigInt
  status       RecordStatus  @default(ACTIVE)
  mood         Mood?         @relation(fields: [mood_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  activity     Activity?     @relation(fields: [activity_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  files         File[]

  @@map("records")
}

model File {
  id            BigInt        @id @default(autoincrement())
  fname         String
  type          String
  url           String
  fkey          String
  size          Decimal
  record_id     BigInt?
  user_id       BigInt?       @unique
  user          User?         @relation("UserAvatar", fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  record        Record?       @relation(fields: [record_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_time  DateTime      @default(now())
  updated_time  DateTime      @updatedAt

  @@map("files")
}

enum RecordStatus {
  ACTIVE
  DRAFT
  DELETED
}