generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt   @id @default(autoincrement())
  email    String   @unique
  username String
  password String
  phone    String?
  gender   String?
  age      Int?
  avatar   File?    @relation("UserAvatar")
  records  Record[]

  @@map("users")
}

model Mood {
  id           BigInt   @id @default(autoincrement())
  name         String
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  records      Record[]

  @@map("moods")
}

model Activity {
  id           BigInt   @id @default(autoincrement())
  name         String
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  records      Record   @relation(fields: [id], references: [id], onDelete: Cascade, map: "activities_record_id_fkey")

  @@map("activities")
}

model Record {
  id           BigInt       @id @default(autoincrement())
  content      String
  created_time DateTime     @default(now())
  updated_time DateTime     @updatedAt
  mood_id      BigInt?
  user_id      BigInt
  status       RecordStatus @default(ACTIVE)
  title        String
  activities   Activity?
  files        File[]
  mood         Mood?        @relation(fields: [mood_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("records")
}

model File {
  id           BigInt   @id @default(autoincrement())
  fname        String
  type         String
  url          String
  fkey         String
  size         Decimal
  record_id    BigInt?
  user_id      BigInt?  @unique
  created_time DateTime @default(now())
  updated_time DateTime @updatedAt
  record       Record?  @relation(fields: [record_id], references: [id])
  user         User?    @relation("UserAvatar", fields: [user_id], references: [id])

  @@map("files")
}

enum RecordStatus {
  ACTIVE
  DRAFT
  DELETED
}
